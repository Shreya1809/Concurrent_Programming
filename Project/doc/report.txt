LAB1 REPORT
A description of your two parallelization strategies
1.	Fork/join: In this algorithm the main function calls the ‘forkjoin method’ takes in the input vector and number of threads as parameters. It then fills the thread argument structure with the values of the low and high index number of the array calculated for the thread number along with the input array. The thread entry function then retrieves the thread arguments and waits on a barrier for all the other threads to reach at the point. Then it deploys the merge sort and sorts the integers in each thread. Finally after all the threads join the ‘n’ sorted arrays are again merged together to form the final output.
2.	 Bucket sort: The main calls ‘bucketsort method’ which takes input array and the no of threads as parameters. Again, the thread argument structure is filled. Each thread inserts some number of integers into different buckets(insertion logic).  Multiset container has been used for each bucket. The insertion logic for finding the index corresponding to the integer (as given in the lab document) decides which integer goes into which bucket. The number of buckets is decided by the size of the input array. Bucket holder is the array of ‘n’ empty list. Each list is sorted (multiset). These sorted lists are then concatenated together to form the final sorted list. 
Each algorithm displays the time it takes for the entire operation. 
A brief description of your code organization
The Code organisation is as follows:
1. bin      	: contains the executable of the program "mysort"
2. doc      	: contains lab report
3. files    	: contains all the testfiles, sorted testfiles by both mergesort as well as sort -n
4. includes	: contains the header files (.h) of the Lab1
5. obj      	: contains the object files (.o) generated during make
6. script   	: contains the bashcript to test the entire program framework.
7. src      	: contains all the source files (.cpp) of Lab1
8. Makefile 	: supports make and make clean only
9. Readme  	: lab details

A description of every file submitted

The description of the source files is as follows:
program.cpp -> contains main.
parse.cpp -> parses the command line options
forkjoin.cpp -> handles the fork/join algorithm for sorting 
bucksort.cpp -> handles bucket sort algorithm.

Compilation instructions
To compile go to Lab1 main directory and simple make
$make
$make clean

 
Execution instructions
The input files need to be in a folder called files and the output sorted file is stored in the same folder.
To execute the program, to go bin directory:
For bucket sort:
$./mysort input.txt -o output.txt -t10 --algo=bucket
For forkjoin:
$./mysort input.txt -o output.txt -t10 --algo=fj

Any extant bugs
1.	The number of threads after the ‘-t’ argument cannot be more than 370 or less than 1. 
2.	If the number of elements in the file is less than number of threads given in the argument the program will not proceed. 

